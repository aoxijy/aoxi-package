name: 自动同步 OpenWrt 插件
run-name: 自动同步插件 (${{ github.event_name }} - ${{ github.run_number }})

on:
  schedule:
    - cron: '0 4 * * *'  # UTC 时间每天4点运行（北京时间12点）
  workflow_dispatch:      # 允许手动触发
  push:
    paths:
      - '.github/workflows/sync.yml'  # 当本工作流文件更改时触发

permissions:
  contents: write  # 授予写入内容的权限

jobs:
  sync:
    name: 同步插件到仓库
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai  # 设置时区为北京时间
    
    steps:
    - name: 检出仓库代码
      uses: actions/checkout@v4
      with:
        ref: master
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 设置 Git 用户
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: 安装 jq (JSON处理器)
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: 准备同步环境
      run: |
        mkdir -p sync_temp
        SYNC_RECORD=".sync-record-master"
        if [ ! -f "$SYNC_RECORD" ]; then
          echo "{}" > "$SYNC_RECORD"
        fi

    - name: 同步插件仓库
      env:
        REPOS_JSON: '{
          "luci-app-argon-config": "https://github.com/jerrykuku/luci-app-argon-config",
          "luci-theme-argon": "https://github.com/jerrykuku/luci-theme-argon",
          "luci-theme-neobird": "https://github.com/papagaye744/luci-theme-design",
          "luci-app-design-config": "https://github.com/0x676e67/luci-app-design-config",
          "luci-app-dockerman": "https://github.com/lisaac/luci-app-dockerman",
          "luci-app-poweroff": "https://github.com/esirplayground/luci-app-poweroff",
          "luci-app-easytier": "https://github.com/EasyTier/luci-app-easytier",
          "luci-app-openclash": "https://github.com/vernesong/OpenClash",
          "luci-lib-taskd": "https://github.com/aoxijy/aoxi-package",
          "taskd": "https://github.com/aoxijy/aoxi-package",
          "luci-app-npc": "https://github.com/aoxijy/aoxi-package",
          "luci-app-shutdown": "https://github.com/aoxijy/aoxi-package",
          "luci-app-vlmcsd": "https://github.com/DokiDuck/luci-app-vlmcsd",
          "luci-app-nikki": "https://github.com/db-one/dbone-packages 23.05",
          "luci-app-ssr-plus": "https://github.com/db-one/dbone-packages 23.05",
          "luci-app-passwall": "https://github.com/db-one/dbone-packages 23.05"
        }'
        SUBDIRS_JSON: '{
          "luci-app-argon-config": "luci-app-argon-config",
          "luci-theme-argon": "luci-theme-argon",
          "luci-theme-neobird": "luci-theme-design",
          "luci-app-design-config": "luci-app-design-config",
          "luci-app-dockerman": "luci-app-dockerman",
          "luci-app-poweroff": "luci-app-poweroff",
          "luci-app-easytier": "luci-app-easytier",
          "luci-app-openclash": "luci-app-openclash",
          "luci-lib-taskd": "luci-lib-taskd",
          "taskd": "taskd",
          "luci-app-npc": "luci-app-npc",
          "luci-app-shutdown": "luci-app-shutdown",
          "luci-app-vlmcsd": "luci-app-vlmcsd",
          "luci-app-nikki": "OpenWrt-nikki",
          "luci-app-ssr-plus": "helloworld",
          "luci-app-passwall": "passwall"
        }'
      run: |
        # 创建临时目录
        mkdir -p sync_temp
        cd sync_temp
        
        # 解析JSON配置
        echo "$REPOS_JSON" > repos.json
        echo "$SUBDIRS_JSON" > subdirs.json
        
        # 读取同步记录
        SYNC_RECORD="../.sync-record-master"
        declare -A last_commits
        if [ -f "$SYNC_RECORD" ]; then
          while IFS= read -r line; do
            if [[ -n "$line" && "$line" =~ ^([^[:space:]]+)[[:space:]]+(.+)$ ]]; then
              repo="${BASH_REMATCH[1]}"
              commit="${BASH_REMATCH[2]}"
              last_commits["$repo"]="$commit"
            fi
          done < "$SYNC_REPORT"
        fi
        
        # 创建临时记录文件
        TEMP_RECORD="${SYNC_RECORD}.tmp"
        > "$TEMP_RECORD"
        
        # 处理每个仓库
        for plugin in $(jq -r 'keys[]' repos.json); do
          repo_info=$(jq -r ".\"$plugin\"" repos.json)
          url=$(echo "$repo_info" | awk '{print $1}')
          branch=$(echo "$repo_info" | awk '{if (NF>1) print $2}')
          
          subdir=$(jq -r ".\"$plugin\"" subdirs.json)
          
          echo "处理插件: $plugin"
          echo "仓库地址: $url"
          echo "分支: ${branch:-默认分支}"
          echo "子目录: $subdir"
          
          # 获取最新提交哈希
          if [ -n "$branch" ]; then
            latest_commit=$(git ls-remote "$url" "refs/heads/$branch" | awk '{print $1}')
          else
            latest_commit=$(git ls-remote "$url" HEAD | awk '{print $1}')
          fi
          
          if [ -z "$latest_commit" ]; then
            echo "无法获取最新提交，跳过 $plugin"
            continue
          fi
          
          last_commit="${last_commits[$plugin]}"
          
          # 检查是否需要更新
          if [ "$last_commit" != "$latest_commit" ] || [ -z "$last_commit" ]; then
            echo "发现更新: $plugin (${last_commit:0:7} -> ${latest_commit:0:7})"
            
            # 克隆仓库
            clone_cmd="git clone --depth 1"
            if [ -n "$branch" ]; then
              clone_cmd="$clone_cmd -b $branch"
            fi
            clone_cmd="$clone_cmd \"$url\" \"$plugin-temp\""
            
            if eval $clone_cmd; then
              # 提取指定子目录
              if [ -d "$plugin-temp/$subdir" ]; then
                rm -rf "../$plugin"
                mkdir -p "../$plugin"
                cp -r "$plugin-temp/$subdir/"* "../$plugin/"
              else
                echo "警告: 子目录 $subdir 不存在，使用根目录"
                rm -rf "../$plugin"
                mv "$plugin-temp" "../$plugin"
              fi
              
              # 清理.git目录
              rm -rf "../$plugin/.git"
              echo "✅ $plugin 同步完成"
            else
              echo "❌ $plugin 克隆失败"
            fi
            
            # 清理临时文件
            rm -rf "$plugin-temp"
          else
            echo "✅ $plugin 已是最新，跳过"
          fi
          
          # 记录最新提交
          echo "$plugin $latest_commit" >> "$TEMP_RECORD"
        done
        
        # 更新同步记录
        mv "$TEMP_RECORD" "$SYNC_RECORD"
        cd ..

    - name: 提交更改
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git add .
          git commit -m "🔄 自动同步插件 ($(date '+%Y-%m-%d %H:%M:%S'))"
          git push origin master
          echo "✅ 更改已提交并推送"
        else
          echo "✅ 没有更改需要提交"
        fi

  clean_runs:
    name: 清理运行记录
    runs-on: ubuntu-latest
    needs: sync
    permissions:
      actions: write  # 授予删除运行记录的权限
    steps:
    - name: 删除旧的工作流运行记录
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        retain_days: 2
        keep_minimum_runs: 5
