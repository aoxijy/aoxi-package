name: 自动同步上游插件
run-name: 自动同步上游插件（${{ github.event_name }} - ${{ github.run_number }}）

on:
  schedule:
    - cron: '0 4 * * *'  # UTC 4点，即北京时间12点
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/sync.yml'

permissions:
  contents: write  # 授予写入仓库内容的权限

jobs:
  sync:
    name: 同步到 master 分支
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai
    steps:
      - name: 检出 master 分支
        uses: actions/checkout@v4
        with:
          ref: master
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: 设置 Git 用户名
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 检查并安装 jq
        run: |
          if ! command -v jq &> /dev/null; then
            echo "jq 未安装，正在安装..."
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "jq 已安装"
          fi

      - name: 加载同步记录
        run: |
          SYNC_RECORD=".sync-record-master"
          if [ -f "$SYNC_RECORD" ]; then
            echo "读取已有同步记录: $SYNC_RECORD"
          else
            echo "未找到同步记录文件，创建新文件: $SYNC_RECORD"
            touch "$SYNC_RECORD"
          fi

      - name: 增量同步仓库
        run: |
          # 定义要同步的仓库和子目录
          REPOS_JSON='{
            "luci-app-argon-config": "https://github.com/jerrykuku/luci-app-argon-config",
            "luci-theme-argon": "https://github.com/jerrykuku/luci-theme-argon",
            "luci-theme-neobird": "https://github.com/papagaye744/luci-theme-design",
            "luci-app-design-config": "https://github.com/0x676e67/luci-app-design-config",
            "luci-app-dockerman": "https://github.com/lisaac/luci-app-dockerman",
            "luci-app-poweroff": "https://github.com/esirplayground/luci-app-poweroff",
            "luci-app-easytier": "https://github.com/EasyTier/luci-app-easytier",
            "luci-app-openclash": "https://github.com/vernesong/OpenClash",
            "luci-lib-taskd": "https://github.com/aoxijy/aoxi-package",
            "taskd": "https://github.com/aoxijy/aoxi-package",
            "luci-app-npc": "https://github.com/aoxijy/aoxi-package",
            "luci-app-shutdown": "https://github.com/aoxijy/aoxi-package",
            "luci-app-vlmcsd": "https://github.com/DokiDuck/luci-app-vlmcsd",
            "luci-app-nikki": "https://github.com/db-one/dbone-packages 23.05",
            "luci-app-ssr-plus": "https://github.com/db-one/dbone-packages 23.05",
            "luci-app-passwall": "https://github.com/db-one/dbone-packages 23.05"
          }'
          
          SUBDIRS_JSON='{
            "luci-app-argon-config": "luci-app-argon-config",
            "luci-theme-argon": "luci-theme-argon",
            "luci-theme-neobird": "luci-theme-design",
            "luci-app-design-config": "luci-app-design-config",
            "luci-app-dockerman": "luci-app-dockerman",
            "luci-app-poweroff": "luci-app-poweroff",
            "luci-app-easytier": "luci-app-easytier",
            "luci-app-openclash": "luci-app-openclash",
            "luci-lib-taskd": "luci-lib-taskd",
            "taskd": "taskd",
            "luci-app-npc": "luci-app-npc",
            "luci-app-shutdown": "luci-app-shutdown",
            "luci-app-vlmcsd": "luci-app-vlmcsd",
            "luci-app-nikki": "OpenWrt-nikki",
            "luci-app-ssr-plus": "helloworld",
            "luci-app-passwall": "passwall"
          }'
          
          SYNC_RECORD=".sync-record-master"
          TEMP_RECORD="${SYNC_RECORD}.tmp"

          # 解析JSON到关联数组
          declare -A repos
          while IFS="=" read -r key value; do
            repos["$key"]="$value"
          done < <(jq -r 'to_entries | .[] | "\(.key)=\(.value)"' <<< "$REPOS_JSON")

          declare -A subdirs
          while IFS="=" read -r key value; do
            subdirs["$key"]="$value"
          done < <(jq -r 'to_entries | .[] | "\(.key)=\(.value)"' <<< "$SUBDIRS_JSON")

          # 修复：安全读取同步记录
          declare -A last_commits
          if [ -f "$SYNC_RECORD" ]; then
            while IFS= read -r line; do
              # 跳过空行和无效行
              if [[ -z "$line" || "$line" != *" "* ]]; then
                continue
              fi
              repo="${line%% *}"
              commit="${line#* }"
              if [[ -n "$repo" && -n "$commit" ]]; then
                last_commits["$repo"]="$commit"
                echo "从记录加载: $repo = $commit"
              fi
            done < "$SYNC_RECORD"
          fi

          # 创建临时目录
          mkdir -p sync_temp
          cd sync_temp

          # 初始化变化检测标志
          changes_detected=false

          # 清空临时同步记录文件
          > "../$TEMP_RECORD"

          # 遍历所有仓库
          for name in "${!repos[@]}"; do
            (
              echo "🔁 开始处理仓库: $name"

              entry="${repos[$name]}"
              url=$(echo "$entry" | awk '{print $1}')
              branch=$(echo "$entry" | awk '{print $2}')
              echo "   URL: $url"
              echo "   分支: ${branch:-默认分支}"

              # 获取远程最新提交
              if [ -n "$branch" ]; then
                remote_commit=$(git ls-remote "$url" "refs/heads/$branch" | awk '{print $1}')
              else
                remote_commit=$(git ls-remote "$url" HEAD | awk '{print $1}')
              fi

              if [ -z "$remote_commit" ]; then
                echo "❌ 无法获取远程仓库最新提交，跳过 $name"
                # 保留原有记录（如果存在）
                if [ -n "${last_commits[$name]:-}" ]; then
                  echo "$name ${last_commits[$name]}" >> "../$TEMP_RECORD"
                fi
                exit 0
              fi

              local_commit="${last_commits[$name]:-}"
              
              # 关键优化：当同步记录文件为空时强制拉取
              if [ ! -s "../$SYNC_RECORD" ] || [ -z "$local_commit" ]; then
                echo "🔄 首次同步或记录为空，强制更新 $name"
                changes_detected=true
                should_update=true
              elif [ "$remote_commit" == "$local_commit" ]; then
                echo "✅ $name 无变化，跳过更新"
                should_update=false
              else
                echo "🔄 $name 有更新（旧: ${local_commit:0:7} → 新: ${remote_commit:0:7}）"
                changes_detected=true
                should_update=true
              fi

              if ${should_update:-true}; then
                # 清理旧目录
                if [ -d "../$name" ]; then
                  echo "   清理旧目录: ../$name"
                  rm -rf "../$name"
                fi

                # 克隆仓库（带重试）
                clone_dir="$name-temp"
                max_retries=3
                retry_count=0
                while [ $retry_count -lt $max_retries ]; do
                  if [ -n "$branch" ]; then
                    git clone -q --depth=1 -b "$branch" "$url" "$clone_dir"
                  else
                    git clone -q --depth=1 "$url" "$clone_dir"
                  fi

                  if [ $? -eq 0 ]; then
                    break
                  fi
                  retry_count=$((retry_count+1))
                  echo "⚠️ 克隆失败，重试 $retry_count/$max_retries..."
                  sleep 2
                  rm -rf "$clone_dir"
                done

                if [ $retry_count -eq $max_retries ]; then
                  echo "❌ 克隆 $name 失败，跳过"
                  # 保留原有记录（如果存在）
                  if [ -n "$local_commit" ]; then
                    echo "$name $local_commit" >> "../$TEMP_RECORD"
                  else
                    echo "$name $remote_commit" >> "../$TEMP_RECORD"
                  fi
                  exit 0
                fi

                # 提取子目录
                if [[ -n "${subdirs[$name]}" ]]; then
                  subdir="${subdirs[$name]}"
                  echo "   提取子目录: $subdir"
                  if [ -d "$clone_dir/$subdir" ]; then
                    mv "$clone_dir/$subdir" "${clone_dir}-content"
                    rm -rf "$clone_dir"
                    mv "${clone_dir}-content" "$clone_dir"
                  else
                    echo "⚠️ 子目录 $subdir 不存在，跳过提取"
                  fi
                fi

                # 移除 .git 并移动到目标
                rm -rf "$clone_dir/.git"
                mv "$clone_dir" "../$name"

                echo "✅ $name 更新完成"
              fi

              # ✅ 无论是否更新都记录最新 commit
              echo "$name $remote_commit" >> "../$TEMP_RECORD"
            ) || echo "⚠️ $name 处理失败，继续下一个仓库"
          done

          cd ..

          # ✅ 保存新同步记录
          mv "$TEMP_RECORD" "$SYNC_RECORD"
          echo "📦 已更新同步记录内容:"
          cat "$SYNC_RECORD"

      - name: 检测改动并提交
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            time=$(date '+%Y-%m-%d %H:%M:%S')
            git add .
            git commit -m "🎈 同步时间 $time 🚀"
            git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
            git push origin master
            echo "✅ 已提交并推送更改"
          else
            echo "🟢 无变化，无需提交"
          fi

  clean_runs:
    name: 清理历史运行记录
    runs-on: ubuntu-latest
    needs: sync
    steps:
      - name: 清理工作流运行记录
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          retain_days: 0
          keep_minimum_runs: 0
