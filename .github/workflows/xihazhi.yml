name: zuizhong

on:
  workflow_dispatch: # 允许手动触发
  push:
    paths:
      - 'luci-app-npc/**'
      - 'nps/**'
    branches: [ "main", "master" ]
  pull_request:
    paths:
      - 'luci-app-npc/**'
      - 'nps/**'

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04
      options: --privileged

    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y \
            build-essential \
            clang \
            gawk \
            gcc-multilib \
            g++-multilib \
            gettext \
            libncurses5-dev \
            libncursesw5-dev \
            libssl-dev \
            python3-distutils \
            rsync \
            unzip \
            zlib1g-dev \
            file \
            wget \
            git \
            subversion \
            quilt \
            libelf-dev \
            zstd \
            ccache \
            python3-setuptools \
            python3-dev \
            swig \
            time \
            ecj \
            fastjar \
            java-propose-classpath \
            libxml2-utils \
            xsltproc \
            lib32z1-dev \
            libc6-dev-i386 \
            golang-go  # 添加 Go 语言工具链

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download OpenWrt 24.10 SDK
        run: |
          SDK_URL="https://downloads.openwrt.org/snapshots/targets/x86/64/openwrt-sdk-x86-64_gcc-14.3.0_musl.Linux-x86_64.tar.zst"
          echo "Downloading SDK from: $SDK_URL"
          wget -q --tries=3 --timeout=30 "$SDK_URL" -O openwrt-sdk.tar.zst
          
          if [ ! -s "openwrt-sdk.tar.zst" ]; then
            echo "Error: Failed to download SDK or file is empty"
            exit 1
          fi

      - name: Extract SDK
        run: |
          zstd -d -c openwrt-sdk.tar.zst | tar -x
          rm openwrt-sdk.tar.zst
          
          EXTRACTED_DIR=$(find . -maxdepth 1 -type d -name "openwrt-sdk-*" | head -1)
          if [ -z "$EXTRACTED_DIR" ]; then
            echo "Error: Could not find extracted SDK directory"
            exit 1
          fi
          mv "$EXTRACTED_DIR" openwrt-sdk
          echo "SDK extracted to: $(pwd)/openwrt-sdk"

      - name: Prepare SDK and link packages
        run: |
          cd openwrt-sdk
          echo "Linking your packages to SDK..."
          ln -sf "$GITHUB_WORKSPACE/luci-app-npc" package/
          ln -sf "$GITHUB_WORKSPACE/nps" package/
          
          echo "Contents of package directory after linking:"
          ls -la package/ | grep -E "(nps|luci-app-npc)"
          
          FORCE=1 ./scripts/feeds update -a
          FORCE=1 ./scripts/feeds install libc

      - name: Download nps source and calculate hash
        run: |
          cd openwrt-sdk
          mkdir -p dl
          echo "Downloading nps source from GitHub..."
          wget -O dl/nps-0.26.26.tar.gz https://github.com/yisier/nps/archive/refs/tags/v0.26.26.tar.gz
          
          if [ ! -s "dl/nps-0.26.26.tar.gz" ]; then
            echo "Error: Failed to download nps source or file is empty"
            exit 1
          fi
          
          echo "Download successful. File info:"
          ls -la dl/nps-0.26.26.tar.gz
          echo "File size:"
          du -h dl/nps-0.26.26.tar.gz
          
          # 计算 SHA256 哈希值
          HASH_VALUE=$(sha256sum dl/nps-0.26.26.tar.gz | cut -d' ' -f1)
          echo "::notice title=SHA256 Hash Value::The SHA256 hash of nps-0.26.26.tar.gz is: $HASH_VALUE"
          echo "SHA256 hash of nps-0.26.26.tar.gz: $HASH_VALUE"
          echo "Please update this value in your nps/Makefile PKG_HASH variable"
          
          # 将哈希值保存到环境变量中，供后续步骤使用
          echo "HASH_VALUE=$HASH_VALUE" >> $GITHUB_ENV

      - name: Install and configure Go toolchain
        run: |
          cd openwrt-sdk
          echo "Installing and configuring Go toolchain..."
          
          # 检查并安装 Go 工具链
          if ! command -v go &> /dev/null; then
            echo "Go is not installed, installing..."
            apt-get update
            apt-get install -y golang-go
          fi
          
          echo "Go version:"
          go version
          
          # 设置 GOPATH 和 GOROOT
          export GOPATH=/tmp/go
          export GOROOT=/usr/lib/go
          export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
          
          echo "GOPATH: $GOPATH"
          echo "GOROOT: $GOROOT"
          echo "PATH: $PATH"
          
          # 创建必要的目录
          mkdir -p $GOPATH/src $GOPATH/bin $GOPATH/pkg
          
          # 设置 Go 模块代理（可选，但可以加速下载）
          go env -w GOPROXY=https://goproxy.cn,direct
          go env -w GOSUMDB=off
          
          echo "Go environment configured"

      - name: Configure build
        run: |
          cd openwrt-sdk
          echo "CONFIG_TARGET_x86_64=y" > .config
          echo "CONFIG_TARGET_x86_64_Default=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-npc=y" >> .config
          echo "CONFIG_PACKAGE_npc=y" >> .config
          echo "CONFIG_PACKAGE_luci-i18n-npc-zh-cn=y" >> .config
          
          FORCE=1 make defconfig
          
          echo "Final configuration:"
          grep -E "(CONFIG_TARGET|CONFIG_PACKAGE)" .config
      - name: Examine nps source structure
        run: |
          cd openwrt-sdk
          echo "Checking the structure of the downloaded nps source..."
          # 解压下载的源码包到临时目录进行检查
          mkdir -p /tmp/nps-inspect
          tar -xzf dl/nps-0.26.26.tar.gz -C /tmp/nps-inspect
          
          echo "Contents of the extracted nps-0.26.26 directory:"
          find /tmp/nps-inspect -name "*.go" -type f | head -20 # 查找Go文件
          echo "--- Top level directories ---"
          ls -la /tmp/nps-inspect
          # 尝试找到常见的目录结构，比如是否有 'src' 目录或者直接包含 go.mod 的目录
          extracted_dir=$(find /tmp/nps-inspect -maxdepth 1 -type d -name "nps*" | head -1)
          if [ -n "$extracted_dir" ]; then
            echo "Main extracted directory found: $extracted_dir"
            echo "Go files in main directory:"
            find "$extracted_dir" -name "*.go" -type f | head -10
            echo "Does this directory contain go.mod?"
            [ -f "$extracted_dir/go.mod" ] && echo "Yes: $extracted_dir/go.mod" || echo "No go.mod found in top level."
          else
            echo "Could not identify the main extracted directory under /tmp/nps-inspect/"
          fi

      - name: Patch nps Makefile for Go build
        run: |
          cd openwrt-sdk/package/nps
          echo "Patching nps Makefile for Go build issues..."
          
          # 检查并确保 GO_PKG 变量指向正确的模块路径
          # 如果解压后的目录结构显示模块路径不同，需要更新 GO_PKG
          # 例如，如果解压后发现顶层目录是 nps-0.26.26，且包含 go.mod，则模块路径可能在 go.mod 文件中定义
          # 假设通过检查发现需要修改，以下是示例（请根据实际检查结果调整）：
          # sed -i 's|GO_PKG:=ehang.io/nps|GO_PKG:=github.com/yisier/nps|' Makefile
          
          # 确保 GO_PKG_BUILD_PKG 指向包含main包的目录
          # 通常 nps 的客户端是 cmd/npc，服务端是 cmd/nps
          # 查找哪个目录包含主要的main.go
          if grep -q "GO_PKG_BUILD_PKG:=.*cmd/npc" Makefile || grep -q "GO_PKG_BUILD_PKG:=.*cmd/nps" Makefile; then
            echo "GO_PKG_BUILD_PKG seems to point to cmd directories."
          else
            echo "GO_PKG_BUILD_PKG might need adjustment. Current value:"
            grep "GO_PKG_BUILD_PKG:=" Makefile || echo "GO_PKG_BUILD_PKG not found in Makefile"
            # 尝试设置为常见的构建目标
            # sed -i 's|GO_PKG_BUILD_PKG:=.*|GO_PKG_BUILD_PKG:=./cmd/...|' Makefile
          fi
          
          # 检查是否启用了 Go modules，如果没有，可能需要设置
          if ! grep -q "GO111MODULE" Makefile; then
            echo "Adding GO111MODULE=on to enable Go modules..."
            sed -i '/GO_PKG_LDFLAGS/i GO_PKG_VARS += GO111MODULE=on' Makefile
          fi

      - name: Install and configure Go toolchain (Ensure)
        run: |
          cd openwrt-sdk
          echo "Ensuring Go toolchain is available and configured..."
          
          # 再次明确确保Go可用
          if ! command -v go &> /dev/null; then
            echo "Go command not found in PATH, installing..."
            apt-get update
            apt-get install -y golang-go
          fi
          
          # 设置GOPATH和GOROOT，确保OpenWrt构建系统能找到
          export GOPATH=/tmp/go
          export GOROOT=/usr/lib/go
          export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
          
          echo "Current Go version:"
          go version
          echo "GOPATH is set to: $GOPATH"
          echo "GOROOT is set to: $GOROOT"
          
          # 为OpenWrt构建系统创建必要的符号链接或环境设置
          # 有时SDK自带的go工具链可能有问题，尝试链接到系统安装的go
          mkdir -p ./staging_dir/host/bin
          ln -sf $(which go) ./staging_dir/host/bin/go || true
          
          # 检查SDK的feeds中的golang包是否已安装
          if [ ! -d "./feeds/packages/lang/golang" ]; then
            echo "Golang feed package directory not found, attempting to install from feeds..."
            ./scripts/feeds install golang
          fi          

      - name: Build packages
        run: |
          cd openwrt-sdk
          make package/nps/clean 2>/dev/null || true
          
          echo "Building npc package..."
          # 设置 Go 环境变量
          export GOPATH=/tmp/go
          export GOROOT=/usr/lib/go
          export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
          
          FORCE=1 make package/nps/compile V=ss -j1
          
          echo "Building luci-app-npc package..."
          FORCE=1 make package/luci-app-npc/compile V=ss -j1

      - name: Check build results
        run: |
          cd openwrt-sdk
          echo "Searching for built packages..."
          find . -name "*.ipk" | grep -E "(npc|luci-app-npc)" | while read file; do
            echo "Found: $file"
            basename "$file"
          done
          
          NPC_IPK=$(find bin -name "npc_*.ipk" | head -1)
          if [ -f "$NPC_IPK" ]; then
            echo "=== NPC PACKAGE INFO ==="
            echo "Filename: $(basename $NPC_IPK)"
            # 提取控制文件信息
            tar -xf "$NPC_IPK" control.tar.gz 2>/dev/null || true
            if [ -f "control.tar.gz" ]; then
              tar -xzf control.tar.gz ./control 2>/dev/null || true
              if [ -f "control" ]; then
                echo "Control file info:"
                grep -E "Package|Version|Architecture" control
                rm control control.tar.gz 2>/dev/null || true
              fi
            fi
          else
            echo "ERROR: Could not find npc IPK file!"
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-24.10-npc-packages
          path: |
            openwrt-sdk/bin/packages/*/base/npc_*.ipk
            openwrt-sdk/bin/packages/*/base/luci-app-npc_*.ipk
            openwrt-sdk/bin/packages/*/base/luci-i18n-npc-zh-cn_*.ipk
          if-no-files-found: error
          
      - name: Show hash value reminder
        run: |
          echo "::warning title=Update Your Makefile::Please update the PKG_HASH value in your nps/Makefile to: $HASH_VALUE"
          echo "REMINDER: The SHA256 hash of nps-0.26.26.tar.gz is: $HASH_VALUE"
          echo "Please update your nps/Makefile: PKG_HASH:=$HASH_VALUE"
